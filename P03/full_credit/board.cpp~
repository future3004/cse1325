#include "board.h"
#include "tile.h"
#include<iostream>
#include<string>
#include <vector>
#include<ctime>
#include <algorithm>
#include <cstdlib>

std::vector<std::string> words {
"bang", "beam", "bear", "cafe", "came",
"cold", "come", "cool", "date", "diet",
"door", "doth", "echo", "exes", "exit",
"face", "fame", "feed", "fire", "five",
"four", "free", "frog", "from", "game",
"goes", "good", "grit", "have", "heal",
"hear", "here", "hide", "hole", "home",
"hope", "huge", "keep", "kill", "lace",
"lame", "leek", "life", "live", "maps",
"mass", "mate", "maze", "move", "near",
"need", "nine", "once", "quit", "ques",
"race", "read", "reed", "reef", "rice",
"roof", "sins", "stay", "tame", "teen",
"tens", "tide", "tied", "tree", "twin",
"zero", "zips",
};
//std::rand(time(NULL));

Board::Board(int tiles) {
  int random = std::rand()%9+1;
  std::random_shuffle(words.begin(), words.end()); // shuffle list of words
  //for(int i = 0; i < 2; i++){_tiles.push_back};
  //std::cout << words.at(0) << " " << words.at(1) << std::endl;
  Tile t1{words.at(0)};
  Tile t2{words.at(1)};
  _tiles = {t1,t1,t2,t2};
  std::random_shuffle(_tiles.begin(), _tiles.end()); // shuffle _tiles vector
}

std::string Board::attempt(int tile1, int tile2){
    bool value = _tiles.at(tile1).match(_tiles.at(tile2));
	return "MATCHES";
}

bool Board::solved(){
	return false;
}

std::string Board::to_string(){
  std::string m;
  for(int i = 0; i < _tiles; ++i){
    _tiles.push_back({words.at(i)});
    //std::cout << i + ") " << t.to_string() << std::endl;
 }
 
 return m;
}









